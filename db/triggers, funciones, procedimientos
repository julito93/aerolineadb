================ TRIGGERS ========================

create or replace trigger trigger_descuento BEFORE UPDATE OR INSERT 
ON DESCUENTOS
FOR EACH ROW
BEGIN
if :NEW.liminfdias >= :NEW.limsupdias then
raise_application_error( -20000,'Verifique que la fecha limite inferior es menor que la fecha limite superior.');
elsif :NEW.liminfcupos >= :NEW.limsupcupos then
raise_application_error( -20001,'Verifique que la ocupacion inferior es menor que la ocupacion superior.');
END if;
END;


================ PROCEDIMIENTOS ========================

create or replace procedure ranking_dinero is
cursor iterador is
SELECT v.VENDEDOR as Nombre, SUM( t.VALOR ) as Dinero_Recaudado
FROM VENTAS v, TIQUETES t
WHERE v.VENTA_ID = t.VENTA_ID
GROUP BY v.VENDEDOR
ORDER BY Dinero_Recaudado DESC;
pos NUMBER := 1;
begin
EXECUTE IMMEDIATE 'CREATE TABLE ranking(	posicion NUMBER, nombre VARCHAR2(30), dinero_recaudado	NUMBER(10,2), PRIMARY KEY (posicion) )';
EXCEPTION
    WHEN OTHERS THEN
      IF SQLCODE = -955 THEN
        EXECUTE IMMEDIATE 'TRUNCATE table ranking';
      ELSE
         RAISE;
      END IF;
  for v in iterador loop
  EXECUTE IMMEDIATE 'insert into ranking values ( :1, :2, :3 )' using pos, v.Nombre, TO_NUMBER(v.Dinero_Recaudado) ;
  pos := pos + 1;
  end loop;  
  commit;
end;
/


create or replace procedure ranking_cantidad is
cursor iterador is
SELECT v.VENDEDOR as Nombre, count( t.TIQUETE_ID ) as Cantidad_Tiquetes
FROM VENTAS v, TIQUETES t
WHERE v.VENTA_ID = t.VENTA_ID
GROUP BY v.VENDEDOR
ORDER BY Cantidad_Tiquetes DESC;
pos NUMBER := 1;
begin
EXECUTE IMMEDIATE 'CREATE TABLE ranking2(	posicion NUMBER, nombre VARCHAR2(30), cantidad_Tiquetes	NUMBER(10,0), PRIMARY KEY (posicion) )';
EXCEPTION
    WHEN OTHERS THEN
      IF SQLCODE = -955 THEN
        EXECUTE IMMEDIATE 'TRUNCATE table ranking2';
      ELSE
         RAISE;
      END IF;
  for v in iterador loop
  EXECUTE IMMEDIATE 'insert into ranking2 values ( :1, :2, :3 )' using pos, v.Nombre, v.Cantidad_Tiquetes;
  pos := pos + 1;
  end loop;  
  commit;
end;
/

create or replace PROCEDURE REPORTE_VENDEDOR 
(
  USUARIO IN VARCHAR2 
, VALOR_TOTAL OUT NUMBER 
, CANTIDAD OUT NUMBER 
, LUGARES OUT SYS_REFCURSOR 
) AS 
BEGIN
  OPEN LUGARES FOR
  SELECT NOMBRE_LUGAR, COUNT(*) as CONTEO
  FROM(
    SELECT lu.DESCRIPCION, lu.NOMBRE_LUGAR
    FROM VENTAS ve, TIQUETES ti, VIAJES vi, LUGARES lu
    WHERE ve.VENDEDOR = USUARIO
    AND ti.VENTA_ID = ve.VENTA_ID
    AND vi.VIAJE_ID = ti.VIAJE_ID
    AND lu.NOMBRE_LUGAR = vi.DESTINO)
  GROUP BY NOMBRE_LUGAR
  ORDER BY CONTEO DESC;
  
  SELECT COUNT(ti.TIQUETE_ID), SUM(ti.VALOR)
  INTO CANTIDAD, VALOR_TOTAL
  FROM TIQUETES ti, VENTAS ve
  WHERE ve.VENDEDOR = USUARIO
  AND ti.VENTA_ID = ve.VENTA_ID;
  
END REPORTE_VENDEDOR;
/


================ FUNCIONES ========================

create or replace FUNCTION compactar_tabla_rank return varchar2 IS
compactado varchar2(500);
cursor iterador is
SELECT *
FROM RANKING r
ORDER BY r.DINERO_RECAUDADO ASC;
BEGIN  
  for v in iterador loop
  compactado :=  v.NOMBRE || ' - $' || v.DINERO_RECAUDADO || ', ' || compactado;
  end loop; 
  return compactado;
END;
/

create or replace FUNCTION compactar_tabla_rank2 return varchar2 IS
compactado varchar2(500);
cursor iterador is
SELECT *
FROM RANKING2 r
ORDER BY r.cantidad_Tiquetes ASC;
BEGIN  
  for v in iterador loop
  compactado :=  v.NOMBRE || ' - # Tiquetes: ' || v.cantidad_Tiquetes || ', ' || compactado;
  end loop; 
  return compactado;
END;
/

